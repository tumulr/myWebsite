---
interface Props {
    code: string;
    language?: string;
    filename?: string;
}

const { code, language = "plaintext", filename } = Astro.props;
---

<div class="code-snippet">
    {filename && <div class="code-filename">{filename}</div>}
    <div class="code-container">
        <button class="copy-button" aria-label="Copy code">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                <path d="M4 1.5H3a2 2 0 0 0-2 2V14a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V3.5a2 2 0 0 0-2-2h-1v1h1a1 1 0 0 1 1 1V14a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1V3.5a1 1 0 0 1 1-1h1v-1z"/>
                <path d="M9.5 1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5v-1a.5.5 0 0 1 .5-.5h3zm-3-1A1.5 1.5 0 0 0 5 1.5v1A1.5 1.5 0 0 0 6.5 4h3A1.5 1.5 0 0 0 11 2.5v-1A1.5 1.5 0 0 0 9.5 0h-3z"/>
            </svg>
        </button>
        <pre class={`language-${language}`}><code class={`language-${language}`}>{code}</code></pre>
    </div>
</div>

<script>
    // Find all copy buttons
    const copyButtons = document.querySelectorAll('.copy-button');

    copyButtons.forEach(button => {
        button.addEventListener('click', () => {
            // Find the code element next to this button
            const container = button.closest('.code-container');
            if (!container) return;

            const codeElement = container.querySelector('code');
            if (!codeElement) return;

            const textToCopy = codeElement.textContent || '';

            // Copy to clipboard
            navigator.clipboard.writeText(textToCopy).then(() => {
                // Visual feedback on successful copy
                button.classList.add('copied');

                // Change button content temporarily to indicate copied
                const originalInnerHTML = button.innerHTML;
                button.innerHTML = `
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                        <path d="M13.854 3.646a.5.5 0 0 1 0 .708l-7 7a.5.5 0 0 1-.708 0l-3.5-3.5a.5.5 0 1 1 .708-.708L6.5 10.293l6.646-6.647a.5.5 0 0 1 .708 0z"/>
                    </svg>
                `;

                // Reset after a short delay
                setTimeout(() => {
                    button.classList.remove('copied');
                    button.innerHTML = originalInnerHTML;
                }, 2000);
            }).catch(err => {
                console.error('Failed to copy text: ', err);
            });
        });
    });
</script>

<style>
    .code-snippet {
        margin: 1.5rem 0;
        border-radius: 8px;
        overflow: hidden;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    }

    .code-filename {
        background-color: #f0f0f0;
        color: #333;
        font-family: monospace;
        font-size: 0.9rem;
        padding: 0.5rem 1rem;
        border-bottom: 1px solid #ddd;
    }

    .code-container {
        position: relative;
    }

    .copy-button {
        position: absolute;
        top: 0.5rem;
        right: 0.5rem;
        background: rgba(255, 255, 255, 0.7);
        border: 1px solid #ddd;
        border-radius: 4px;
        padding: 0.25rem;
        cursor: pointer;
        z-index: 10;
        display: flex;
        align-items: center;
        justify-content: center;
        color: #555;
        transition: all 0.2s ease;
    }

    .copy-button:hover {
        background: rgba(255, 255, 255, 0.9);
        color: #000;
    }

    .copy-button.copied {
        background-color: #4CAF50;
        color: white;
    }

    pre {
        margin: 0;
        padding: 1.25rem;
        overflow-x: auto;
        background-color: #f8f8f8;
        color: #333;
        border-radius: 8px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
    }

    code {
        font-family: Menlo, Monaco, Consolas, 'Courier New', monospace;
        font-size: 0.9rem;
        line-height: 1.6;
    }

    /* Basic syntax highlighting colors for light theme */
    :global(.token.comment),
    :global(.token.prolog),
    :global(.token.doctype),
    :global(.token.cdata) {
        color: #708090;
    }

    :global(.token.punctuation) {
        color: #444;
    }

    :global(.token.tag),
    :global(.token.attr-name),
    :global(.token.namespace),
    :global(.token.deleted) {
        color: #c92c2c;
    }

    :global(.token.function-name) {
        color: #2c7ad6;
    }

    :global(.token.boolean),
    :global(.token.number),
    :global(.token.function) {
        color: #d73a49;
    }

    :global(.token.property),
    :global(.token.class-name),
    :global(.token.constant),
    :global(.token.symbol) {
        color: #e36209;
    }

    :global(.token.selector),
    :global(.token.important),
    :global(.token.atrule),
    :global(.token.keyword),
    :global(.token.builtin) {
        color: #6f42c1;
    }

    :global(.token.string),
    :global(.token.char),
    :global(.token.attr-value),
    :global(.token.regex),
    :global(.token.variable) {
        color: #22863a;
    }

    :global(.token.operator),
    :global(.token.entity),
    :global(.token.url) {
        color: #005cc5;
    }
</style>